RFC           Модель пользовательского интерфейса          Сентябрь 2025

         Минимальная модель виджетов пользовательского
             интерфейса и диспетчеризации событий

Аудитория: разработчики UI-фреймворков и приложений

Статус этого мемо

   Этот документ публикуется как информационный. Определения нормативных
   слов ДОЛЖЕН, НЕ ДОЛЖЕН, СЛЕДУЕТ, МОЖЕТ читаются согласно BCP 14
   [RFC2119, RFC8174], когда они написаны ПРОПИСНЫМИ.

Оглавление

   1   Аннотация ......................................................2
   2   Термины и определения ..........................................2
   3   Область действия ...............................................3
   4   Геометрическая модель ..........................................4
   4.1   Координатные системы и прямоугольники ........................4
   4.2   Видимость и видимый прямоугольник ............................4
   4.3   Z-порядок ....................................................4
   5   Глобальное состояние ...........................................5
   6   Типы событий ...................................................5
   7   Модель доставки и распространения событий ......................6
   7.1   Классы маршрутов .............................................6
   7.2   Порядок обхода, условия остановки и инварианты ...............6
   8   Выбор целевого виджета и захват указателя ......................7
   9   Специфика указательных событий .................................7
   10   Модель фокуса .................................................7
   10.1   Фокусируемость и порядок обхода .............................7
   10.2   Группы фокуса ...............................................8
   10.3   Доставка по модели фокуса ...................................8
   10.4   Изменение фокуса и совместимость ............................9
   11   Модель локальных взаимодействий ...............................9
   11.1   Контекст действия и режимы распространения ..................9
   11.2   Результат обработки действия и порядок доставки .............9
   11.3   Соотношение событий и действий ..............................9
   12   Отрисовка ....................................................10
   13   Расширяемость интерфейсов ....................................10
   14   Инварианты и требования к совместимости ......................10
   15   Соображения безопасности .....................................11
   16   Соображения производительности ...............................11
   17   Соответствие .................................................11
   18   Ссылки .......................................................12
   19   История изменений ............................................12







Коллективный разум         Предложение черновика            [Страница 1]

RFC           Модель пользовательского интерфейса          Сентябрь 2025


1. Аннотация

   Этот документ определяет минимальную, языконезависимую модель
   пользовательского интерфейса на основе иерархии "виджетов",
   глобального состояния, системы событий и локальных действий. Документ
   намеренно избегает привязки к конкретным типам данных или синтаксису
   конкретного языка.

   Спецификация описывает геометрию и вложенность виджетов, типы
   событий, правила распространения, выбор целевого виджета, захват
   указателя и механизм действий.

2. Термины и определения

   Виджет
      Элемент пользовательского интерфейса с прямоугольной областью и
      необязательными дочерними виджетами.

   Прямоугольник виджета (`frame`)
      Набор параметров `x`, `y`, `w`, `h` в координатах родительского
      виджета (см. раздел 4.1). Задаёт положение и размеры виджета.
      `w` и `h` строго положительны.

   Область видимости (`viewport`)
      Прямоугольник, ограничивающий видимость ребёнка в координатах
      родителя.

   Видимый прямоугольник
      Пересечение `frame` с унаследованным `viewport`, выраженное в
      локальных координатах текущего виджета.

   Иерархия
      Ориентированное дерево виджетов.

   Слой (Z-порядок)
      Упорядочение дочерних виджетов по убыванию "высоты"; элементы с
      большим Z располагаются "выше". Любой ребёнок считается выше
      своего родителя.

   Глобальное состояние
      Синглтон-контекст окружения и служебных указателей (см. раздел 5).

   Целевой виджет (`target`)
      Наиболее вложенный виджет, удовлетворяющий правилам выбора цели
      (см. раздел 8).





Коллективный разум         Предложение черновика            [Страница 2]

RFC           Модель пользовательского интерфейса          Сентябрь 2025


   Захват указателя
      Явная привязка указательных событий к виджету до завершения жеста
      (см. раздел 8).

   Фокус
      Единственный выбранный виджет, получающий клавиатурный ввод по
      FOCUS-PATH (см. раздел 10).

   Индекс фокуса (`tabindex`)
      Целочисленный индекс для последовательной навигации фокуса
      (см. раздел 10.1).

   Группа фокуса
      Поддерево с собственной последовательной навигацией
      (см. раздел 10.2).

   Событие
      Сообщение о взаимодействии пользователя или системы.

   Контекст диспетчеризации
      Структура, сопровождающая событие при обходе дерева.

   Действие
      Синхронное локальное взаимодействие между виджетами
      (см. раздел 11).

3. Область действия

   Спецификация покрывает:

      - Модель геометрии, вложенности, видимости и Z-порядка;

      - Типы событий и их распространение;

      - Требования к выбору целевого виджета;

      - Модель фокуса;

      - Механизм действий и их распространение.

   Отрисовка, доступность, анимации, раскладка и конкретные типы данных
   не нормируются, если не сказано иначе.








Коллективный разум         Предложение черновика            [Страница 3]

RFC           Модель пользовательского интерфейса          Сентябрь 2025


4. Геометрическая модель

4.1. Координатные системы и прямоугольники

   Каждый виджет ДОЛЖЕН иметь прямоугольник `frame` в системе координат
   родителя. Параметры `w` и `h` отражают ширину и высоту прямоугольника
   соответственно, а также ДОЛЖНЫ принимать строго положительные
   значения.

   Диспетчеризация ДОЛЖНА преобразовывать контекст так, чтобы внутри
   обработчиков текущего виджета доступные координаты были локальными
   (см. раздел 7).

   Попадание точки (x, y) в произвольный прямоугольник `rect`
   выполняется при одновременном выполнении следующих условий:

      x ∈ [rect.x, rect.x + rect.w)
      y ∈ [rect.y, rect.y + rect.h)

   Здесь `x` и `y` заданы в относительных координатах путём согласования
   родительским виджетом.

   Тип координат и правила округления не нормируются.

   Под "абсолютными" координатами понимаются координаты в системе
   корневого виджета. Способ преобразования координат из абсолютных
   в "относительные" остаётся вне спецификации, но ДОЛЖЕН быть
   согласован для всей иерархии.

4.2. Согласование систем координат

   Наследуемый `viewport` ограничивает видимость ребёнка. Видимый
   прямоугольник виджета задаётся пересечением `frame` данного виджета и
   `viewport` его родительского виджета.

   Операция проверки попадания точки в прямоугольник виджета ДОЛЖНА
   проверять попадание локальной точки в видимый прямоугольник.

4.3. Z-порядок

   Коллекция дочерних виджетов ДОЛЖНА быть упорядочена по
   невозрастающему Z. При равных Z порядок ДОЛЖЕН быть стабильным и
   детерминированным.







Коллективный разум         Предложение черновика            [Страница 4]

RFC           Модель пользовательского интерфейса          Сентябрь 2025


5. Глобальное состояние

   Глобальное состояние ДОЛЖНО предоставлять по крайней мере:

      - Состояние указателя мыши - Текущее положение и произвольные
        метаданные (кнопки, модификаторы и т.п.).

      - Указатель на целевой виджет - Далее именуется `target`
        (см. раздел 8).

      - Указатель на виджет, удерживающий захват указателя - Далее
        именуется `capture`.

      - Указатель на фокусный виджет - Далее именуется `focus`.

      - Монотонные часы.

   Состояние МОЖЕТ содержать дополнительные поля и обратные вызовы
   (например, глобальные обработчики, менеджер очереди и т. д.).

   Если событие не несёт координат, обработчик использует последние
   координаты указателя из глобального состояния.

6. Типы событий

   Предлагается следующая классификация событий:

      - MouseMoveEvent: Перемещение указателя - содержит
        по крайней мере `x`, `y` (абсолютные координаты)

      - MouseDownEvent: Нажатие кнопки мыши - содержит
        по крайней мере `x`, `y` (абсолютные координаты)

      - MouseUpEvent: Отпускание кнопки мыши - может не содержать
        координат; при их отсутствии используются координаты указателя
        из глобального состояния

      - KeyDownEvent: Нажатие клавиши - содержит по крайней мере
        `scancode` (физический код), `mod` (битовая маска модификаций
        нажатой клавиши); реализация МОЖЕТ дополнительно указывать
        `keycode` (логический код) и `repeat`

      - KeyUpEvent: Отпускание клавиши - содержит по крайней мере
        `scancode` (физический код), `mod` (битовая маска модификаций
        нажатой клавиши); реализация МОЖЕТ дополнительно указывать
        `keycode` (логический код)




Коллективный разум         Предложение черновика            [Страница 5]

RFC           Модель пользовательского интерфейса          Сентябрь 2025


      - IdleEvent: Системное событие простоя - содержит по крайней мере
        `dt` (неотрицательное время с последнего IdleEvent). ДОЛЖНО
        всегда возвращать PROPAGATE

      - QuitRequestEvent: Запрос на завершение приложения

   Набор событий МОЖЕТ быть расширен иными типами (например, колесо
   мыши, перетаскивание), не нарушая настоящие правила распространения,
   а также быть разделён на множество типов событий, отличное от
   представленного.

7. Модель доставки и распространения событий

7.1. Классы маршрутов

   Спецификация определяет три режима доставки событий к виджетам:

      - HIT-PATH: указательные события - Доставка начинается с
        `capture`, если он установлен; иначе - с корня. На каждом уровне
        событие доставляется только в поддеревья, чьи видимые
        прямоугольники содержат локальную точку.

      - FOCUS-PATH: события клавиатуры - Доставка начинается с `focus`
        и поднимается к предкам до корня включительно. Если `focus`
        не установлен - доставка начинается с корня (см. раздел 10.3).

      - BROADCAST: широковещательные события - Доставка всем видимым
        виджетам в порядке обхода дерева.

   События жизненного цикла (например, QuitRequestEvent) доставляются
   как широковещательные события; их обработчики имеют возможность
   перехватить действие, тем самым отменив его обработку основным
   циклом, если такой имеется.

7.2. Порядок обхода, условия остановки и инварианты

   Обход дочерних виджетов ДОЛЖЕН выполняться в порядке невозрастания Z.
   При равных Z обход ДОЛЖЕН выполняться в стабильном порядке коллекции.

   Контекст ДОЛЖЕН преобразовываться к локальным координатам виджета до
   вызова его обработчиков.

   Вводится абстрактный результат обработчика:

      - CONSUME - обработка завершена, дальнейшее распространение
        прекращается

      - PROPAGATE - событие может передаваться далее по текущему пути


Коллективный разум         Предложение черновика            [Страница 6]

RFC           Модель пользовательского интерфейса          Сентябрь 2025


   Реализация МОЖЕТ отображать эти результаты на булевы значения или
   перечисления, но поведение ДОЛЖНО соответствовать семантике выше.

   Для любого маршрута первый CONSUME ДОЛЖЕН немедленно прекращать
   дальнейшую доставку по текущему пути. `IdleEvent` НЕ ДОЛЖЕН
   возвращать CONSUME.

8. Выбор целевого виджета и захват указателя

   Перед обработкой каждого MouseMoveEvent поле `target` глобального
   состояния ДОЛЖНО быть сброшено (установлено в неопределённое или
   пустое значение).

   В ходе нисходящего обхода диспетчеризации MouseMoveEvent согласно
   HIT-PATH первый виджет, чья локальная точка попадёт в его видимый
   прямоугольник, МОЖЕТ назначить себя `target`. Если после обхода
   иерархии ни один виджет не назначил себя целевым виджетом, то
   таким виджетом ДОЛЖЕН быть назначен корень иерархии.

   В ходе обработки MouseDownEvent виджет МОЖЕТ установить `capture` на
   себя вплоть до соответствующего MouseUpEvent. Пока `capture`
   установлен, все указательные события доставляются, начиная с
   захваченного. Снятие захвата происходит явно или автоматически при
   MouseUpEvent.

   Реализация ДОЛЖНА корректно работать с "несогласованными"
   последовательностями (MouseUpEvent без доставленного MouseDownEvent,
   KeyUpEvent без KeyDownEvent).

9. Специфика указательных событий

   Если видимый прямоугольник виджета не содержит локальную точку
   события, обработчик НЕ ДОЛЖЕН менять состояние (ни локальное, ни
   глобальное).

   Реализация МОЖЕТ объединять высокочастотные указательные события
   (например, MouseMoveEvent), сохраняя последнее состояние к моменту
   доставки.

   Реализация МОЖЕТ объединять/ограничивать частоту событий в пределах
   кадра без нарушения инвариантов (см. раздел 14).

10. Модель фокуса

10.1. Фокусируемость и порядок обхода

   Виджет считается фокусируемым, если он видим, смонтирован и объявил
   поддержку фокуса.


Коллективный разум         Предложение черновика            [Страница 7]

RFC           Модель пользовательского интерфейса          Сентябрь 2025


   Индекс фокуса (`tabindex`) - целочисленное значение:

      - `tabindex` < 0 - виджет пропускается при последовательной
        навигации (не участвует в `Tab`-цикле), но МОЖЕТ получать фокус
        программно.

      - `tabindex` = 0 - виджет участвует в навигации по естественному
        порядку (см. ниже).

      - `tabindex` > 0 - задаётся явный порядок: сначала обрабатываются
        элементы согласно возрастающему `tabindex`, затем элементы с 0.

   Естественный порядок внутри набора с одинаковым `tabindex` ДОЛЖЕН
   соответствовать порядку обхода дерева по Z и быть стабильным.
   Изменение видимости, вставки или удаления ДОЛЖНО обновлять
   последовательность.

10.2. Группы фокуса

   Группа фокуса задаётся виджетом-корнем "локального" `Tab`-цикла.

   По умолчанию нажатие `Tab` перемещает фокус внутри текущей группы
   фокуса. При исчерпании элементов в группе фокус перемещается к
   следующей группе в порядке обхода дерева либо сбрасывается, если
   подходящих элементов нет. Если у группы установлен соответствующий
   флаг (например, `trap` или `repeat`), фокус НЕ ДОЛЖЕН покидать группу
   клавишами `Tab`/`Shift+Tab`.

   Группы МОГУТ быть вложенными; активной является ближайшая к фокусному
   виджету.

10.3. Доставка по модели фокуса

   KeyDownEvent и KeyUpEvent доставляются, начиная с `focus`, к его
   предкам до корня. Если `focus` не установлен, доставка осуществляется
   в обратном порядке с корня к потомкам.

   Реализация МОЖЕТ назначить обработку клавиш навигации фокуса
   (`Tab`/`Shift+Tab`, стрелки) на уровне групп фокуса. Рекомендованный
   алгоритм Tab:

      - Собрать фокусируемые потомки текущей активной группы;

      - Отсортировать: сперва элементы с `tabindex` > 0 по возрастанию,
        затем с `tabindex` = 0 по естественному порядку; элементы
        с `tabindex` < 0 исключить;

      - Выбрать следующий/предыдущий с учётом цикла.


Коллективный разум         Предложение черновика            [Страница 8]

RFC           Модель пользовательского интерфейса          Сентябрь 2025


   Изменение фокуса МОЖЕТ генерировать действия FocusInEvent и
   FocusOutEvent (см. раздел 11) вместо событий.

10.4. Изменение фокуса и совместимость

   Потеря фокусного виджета (удаление/скрытие) ДОЛЖНА переводить фокус
   на следующий по правилу раздела 10.3 или очищать `focus`, если
   подходящего нет.

   Реализация ДОЛЖНА документировать, какие клавиши инициируют навигацию
   фокуса по умолчанию.

11. Модель локальных взаимодействий

11.1. Контекст действия и режимы распространения

   Действие - синхронное сообщение, инициируемое виджетом
   (либо преобразованием события), содержащее тип и полезную нагрузку.
   Контекст действия МОЖЕТ включать: инициатора, ссылку на глобальное
   состояние, локальные координаты и любые другие произвольные данные.

   Спецификация определяет три режима распространения действий:

      - LOCAL - применяется к инициатору (либо к явно указанному
        адресату) без дальнейшего распространения.

      - BUBBLE - поднимается по родителям от инициатора к корню до
        первого CONSUME.

      - BROADCAST - доставляется всем видимым виджетам
        (аналогично BROADCAST раздела 7).

11.2. Результат обработки действия и порядок доставки

   Обработчик действия возвращает CONSUME или PROPAGATE. Для BUBBLE
   первый CONSUME останавливает подъём. Для BROADCAST CONSUME
   останавливает доставку только для текущей ветви, но не для других
   независимых ветвей (реализация МОЖЕТ оптимизировать).

   Доставка действий ДОЛЖНА происходить после обработки исходного
   события, которое это действие породило, и до формирования кадра
   (см. раздел 12), если не оговорено иначе.

11.3. Соотношение событий и действий

   События - интерфейс аппаратуры и окружения; действия - семантические
   намерения пользовательского интерфейса.



Коллективный разум         Предложение черновика            [Страница 9]

RFC           Модель пользовательского интерфейса          Сентябрь 2025


   Реализация ДОЛЖНА документировать множество доступных типов действий
   и их полезные нагрузки.

12. Отрисовка

   Виджет ДОЛЖЕН предоставлять операцию визуализации, принимающую
   абстрактный контекст вывода.

   Кадр формируется после дренажа очереди событий и доставки IdleEvent.
   Реализация МОЖЕТ синхронизировать темп кадров с внешним таймером или
   вертикальной синхронизацией. При отсутствии активных изменений
   реализация МОЖЕТ пропускать вывод кадра.

   Способ композиции не нормируется; порядок рисования ДОЛЖЕН
   соответствовать Z-порядку, если реализация не задекларировала иное.

13. Расширяемость интерфейсов

   Реализация МОЖЕТ добавлять к виджетам следующие (неисчерпывающие)
   механизмы:

      - Список дочерних виджетов (как в разделе 4);

      - Флаги наведения и нажатия;

      - Обратные вызовы с передачей ссылки на глобальное состояние;

      - Любые дополнительные виды маршрутизации, не нарушающие
        инвариантов (см. раздел 14).

14. Инварианты и требования к совместимости

   Определяются следующие инварианты и требования к совместимости:

      - Геометрическая согласованность - преобразование координат
        событий и проверка попадания ДОЛЖНЫ быть непротиворечивыми
        по всей иерархии.

      - Корневой виджет задаёт абсолютную систему координат.

      - Порядок детей - коллекция детей ДОЛЖНА поддерживать убывающий
        Z-порядок. Для равных Z порядок вызовов ДОЛЖЕН быть
        детерминированным.

      - Остановка распространения - как только участник возвращает
        CONSUME, никакие другие обработчики в ветви не вызываются.
        Обработчики IdleEvent НЕ ДОЛЖНЫ возвращать CONSUME.



Коллективный разум         Предложение черновика           [Страница 10]

RFC           Модель пользовательского интерфейса          Сентябрь 2025


      - Целевой виджет определяется только согласно разделу 8, если
        реализацией не задекларировано иное. Виджет захвата (`capture`)
        имеет приоритет в распространении HIT-PATH.

      - Каждому KeyUpEvent не обязательно предшествует доставленный
        KeyDownEvent. Аналогично, Каждому MouseUpEvent не обязательно
        предшествует доставленный MouseDownEvent. Реализация ДОЛЖНА
        корректно обрабатывать такие случаи.

      - FOCUS-PATH, `tabindex` и группы фокуса соответствуют разделу 10.

      - Автоповтор генерирует дополнительные KeyDownEvent с истинным
        значением параметра `repeat`. KeyUpEvent приходит один раз по
        отпусканию.

15. Соображения безопасности

   Обработчики событий НЕ ДОЛЖНЫ вызывать рекурсивную диспетчеризацию
   того же события без мер защиты от зацикливания.

   Мутации структуры дерева во время обхода ДОЛЖНЫ быть либо запрещены,
   либо выполняться через безопасный механизм (например, отложенное
   применение изменений).

16. Соображения производительности

   Реализации МОГУТ кешировать результаты проверки на попадание
   (например, через региональные индексы) при сохранении корректности
   разделов 7-9.

   Стабильность Z-порядка влечёт асимптотическую сложность O(n) обхода
   по количеству детей; для больших деревьев МОГУТ применяться
   пространственные структуры (BVH/quad-tree), не меняя семантику.

   Реализации МОГУТ ограничивать `dt` для IdleEvent сверху и объединять
   события указателя мыши в пределах кадра.

   Реализации МОГУТ предоставлять обработчикам оценку бюджета времени до
   ближайшего кадра.

17. Соответствие

   Реализация считается соответствующей, если соблюдает разделы 7-11,
   поддерживает минимум раздела 6, предоставляет глобальное состояние по
   разделу 5 и соблюдает инварианты раздела 14.





Коллективный разум         Предложение черновика           [Страница 11]

RFC           Модель пользовательского интерфейса          Сентябрь 2025


18. Ссылки

   [RFC2119] Key words for use in RFCs to Indicate Requirement Levels.

   [RFC8174] Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words.

19. История изменений

   - v0.1 (черновик): первичная формализация базового виджета, событий и
     диспетчеризации.

   - v0.2 (черновик): редакционное и нормативное уточнение минимальной
     модели.

   - v0.3 (черновик): формализация события простоя; исправление ошибок
     форматирования.

   - v0.4 (черновик): формализация события завершения работы и событий
     клавиатуры;

   - v0.5 (черновик): устранение несогласованностей, завершённая модель
     FOCUS-PATH (`tabindex`, группы), введение действий и их
     распространения; добавлен захват указателя.



























Коллективный разум         Предложение черновика           [Страница 12]
